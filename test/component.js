"use strict";const expect=require("chai").expect,componentUtils=require("../util/component");function generateLoremIpsumList(e,t){const i="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas tristique congue pharetra. Cras pharetra varius diam, quis euismod dolor elementum vestibulum. Quisque ornare dignissim enim, sed ornare est suscipit et. Suspendisse sodales lorem quis quam suscipit convallis id a dolor. Mauris efficitur lacinia eros, ut malesuada augue consectetur eu.".split(" "),a=[];for(var n=0;n<t;n++)a.push({_id:n,tag:i[n+e],flag:i[6][n%i[6].length],tstamp:new Date});return a}function clone(e){return JSON.parse(JSON.stringify(e))}describe("component utils",()=>{const e=generateLoremIpsumList(0,8);let t=clone(e);t[1].tag="changedTag",t[3].tag="anotherChangedTag",t[4].tstamp=`${new Date}`,t.pop(),t.shift(),t.push({_id:666,tag:"noTag",flag:"x",tstamp:new Date});let i=[];describe("createMappingFunctionFromCSV",()=>{it("should map one item to another using CSV white/black list",()=>{const e={item:{list:[{tag:"foo"},{tag:"bar"},{tag:"baz"}],id:{uid:42,tstamp:new Date}},almostEvil:665,evil:666},t=componentUtils.createMappingFunctionFromCSV("evil, item, -item.id.tstamp, -item.list.[2]");expect(t).to.be.a("function");const i=t(e);expect(i).to.deep.equal({item:{list:[{tag:"foo"},{tag:"bar"}],id:{uid:42}},evil:666})})}),describe("checkListForChanges",()=>{it("should build new state and find 8 new items",()=>{const{changes:t,newState:a}=componentUtils.checkListForChanges(e,i,"_id",{mappingFunction:({_id:e,tag:t,flag:i})=>({_id:e,tag:t,flag:i})});expect(a.length).to.equal(8),expect(t.filter(e=>"new"===e.state).length).to.equal(8),i=a}),it("should find 2 new, 2 changed and 1 removed item",()=>{const{changes:e,newState:a}=componentUtils.checkListForChanges(t,i,"_id",{mappingFunction:({_id:e,tag:t,flag:i})=>({_id:e,tag:t,flag:i})}),n=[[1,"changed"],[3,"changed"],[666,"new"],[0,"removed"],[7,"removed"]],s=e.filter((e,t)=>e.id===n[t][0]&&e.state===n[t][1]);expect(s.length).to.equal(n.length);const o=a.filter(([e],i)=>e===t[i]._id);expect(o.length).to.equal(t.length),i=a})})});